# Определение декоратора
def logging_decorator(func):
    # В этой строке определяется декоратор, который принимает функцию func в качестве аргумента

    def wrapper(*args, **kwargs):
        # Внутри декоратора определяется внутренняя функция wrapper, которая будет обертывать вызов функции func
        # *args и **kwargs позволяют передавать произвольное количество позиционных и ключевых аргументов

        print(f"Вызвана функция {func.__name__} с аргументами: {args}, {kwargs}")
        # Здесь выводится сообщение о вызове функции, указывая ее имя и переданные аргументы

        result = func(*args, **kwargs)
        # Вызывается оригинальная функция func с переданными аргументами

        print(f"Результат выполнения функции {func.__name__}: {result}")
        # Здесь выводится сообщение о результате выполнения функции

        return result
        # Возвращается результат выполнения оригинальной функции

    return wrapper
    # Возвращается внутренняя функция wrapper в качестве декоратора

# Использование декоратора для первой функции
@logging_decorator
def greet(name):
    # Это первая функция, к которой применен декоратор logging_decorator

    return f"Привет, {name}!"
    # Функция просто формирует строку приветствия с переданным именем и возвращает ее

# Использование декоратора для второй функции
@logging_decorator
def calculate_product(a, b):
    # Это вторая функция, к которой применен декоратор logging_decorator

    return a * b
    # Функция возвращает произведение двух переданных чисел

# Тесты
greeting = greet("Дима")
# Вызывается функция greet с аргументом "Дима", она обернута в декоратор logging_decorator
# Выводится сообщение о вызове функции с аргументом
# Выводится сообщение о результате выполнения функции
# Результат выполнения (строка приветствия) присваивается переменной greeting
print(greeting)
# Результат выполнения функции greet выводится на экран

result = calculate_product(3, 5)
# Вызывается функция calculate_product с аргументами 3 и 5, она обернута в декоратор logging_decorator
# Выводится сообщение о вызове функции с аргументами
# Выводится сообщение о результате выполнения функции
# Результат выполнения (произведение чисел) присваивается переменной result
print("Результат умножения:", result)
# Результат выполнения функции calculate_product выводится на экран с дополнительным текстом